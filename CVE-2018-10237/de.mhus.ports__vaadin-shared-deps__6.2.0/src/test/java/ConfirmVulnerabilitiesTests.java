import com.google.gwt.thirdparty.guava.common.util.concurrent.AtomicDoubleArray;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.objectweb.asm.*;

/**
 * Test case to verify guava deserialisation DoS vulnerabilities.
 * @author shawn
 */
public class ConfirmVulnerabilitiesTests {

    public static boolean isArrayAllocatedInDeserialisation() throws Exception {
        final List<String> callsites = new ArrayList<>();
        // Load the class you want to inspect
        Class<?> targetClass = AtomicDoubleArray.class;
        byte[] classBytes = getClassBytes(targetClass);
        ClassReader classReader = new ClassReader(classBytes);
        ClassVisitor classVisitor = new ClassVisitor(Opcodes.ASM7) {

            @Override
            public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {
                MethodVisitor methodVisitor = super.visitMethod(access, name, descriptor, signature, exceptions);
                if ("readObject".equals(name)) {
                    // && "()V".equals(descriptor)) {
                    return new MethodVisitor(Opcodes.ASM7, methodVisitor) {

                        @Override
                        public void visitMethodInsn(int opcode, String owner, String name, String descriptor, boolean isInterface) {
                            callsites.add(owner + descriptor);
                            super.visitMethodInsn(opcode, owner, name, descriptor, isInterface);
                        }
                    };
                }
                return methodVisitor;
            }
        };
        classReader.accept(classVisitor, ClassReader.EXPAND_FRAMES);
        return callsites.contains("java/util/concurrent/atomic/AtomicLongArray(I)V");
    }

    private static byte[] getClassBytes(Class<?> clazz) throws IOException {
        String className = clazz.getName().replace(".", "/") + ".class";
        InputStream inputStream = clazz.getClassLoader().getResourceAsStream(className);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = inputStream.read(buffer)) != -1) {
            outputStream.write(buffer, 0, bytesRead);
        }
        inputStream.close();
        return outputStream.toByteArray();
    }

    @Test
    public void confirmCVE201810237() throws Exception {
        assertTrue(isArrayAllocatedInDeserialisation());
    }
}
